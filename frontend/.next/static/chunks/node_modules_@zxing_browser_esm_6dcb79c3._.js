(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HTMLCanvasElementLuminanceSource": (()=>HTMLCanvasElementLuminanceSource)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/IllegalArgumentException.js [app-client] (ecmascript) <export default as IllegalArgumentException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$InvertedLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__InvertedLuminanceSource$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/InvertedLuminanceSource.js [app-client] (ecmascript) <export default as InvertedLuminanceSource>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$LuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__LuminanceSource$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/LuminanceSource.js [app-client] (ecmascript) <export default as LuminanceSource>");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
/**/ var HTMLCanvasElementLuminanceSource = function(_super) {
    __extends(HTMLCanvasElementLuminanceSource, _super);
    function HTMLCanvasElementLuminanceSource(canvas) {
        var _this = _super.call(this, canvas.width, canvas.height) || this;
        _this.canvas = canvas;
        _this.tempCanvasElement = null;
        _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);
        return _this;
    }
    HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function(canvas) {
        var canvasCtx;
        try {
            canvasCtx = canvas.getContext('2d', {
                willReadFrequently: true
            });
        } catch (e) {
            canvasCtx = canvas.getContext('2d');
        }
        if (!canvasCtx) {
            throw new Error('Couldn\'t get canvas context.');
        }
        var imageData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);
        return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);
    };
    HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function(imageBuffer, width, height) {
        var grayscaleBuffer = new Uint8ClampedArray(width * height);
        for(var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++){
            var gray = void 0;
            var alpha = imageBuffer[i + 3];
            // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent
            // black (0 alpha, and then 0 RGB). They are often used, of course as the "white" area in a
            // barcode image. Force any such pixel to be white:
            if (alpha === 0) {
                gray = 0xFF;
            } else {
                var pixelR = imageBuffer[i];
                var pixelG = imageBuffer[i + 1];
                var pixelB = imageBuffer[i + 2];
                // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),
                // (306*R) >> 10 is approximately equal to R*0.299, and so on.
                // 0x200 >> 10 is 0.5, it implements rounding.
                // tslint:disable-next-line:no-bitwise
                gray = 306 * pixelR + 601 * pixelG + 117 * pixelB + 0x200 >> 10;
            }
            grayscaleBuffer[j] = gray;
        }
        return grayscaleBuffer;
    };
    HTMLCanvasElementLuminanceSource.prototype.getRow = function(y /*int*/ , row) {
        if (y < 0 || y >= this.getHeight()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__["IllegalArgumentException"]('Requested row is outside the image: ' + y);
        }
        var width = this.getWidth();
        var start = y * width;
        if (row === null) {
            row = this.buffer.slice(start, start + width);
        } else {
            if (row.length < width) {
                row = new Uint8ClampedArray(width);
            }
            // The underlying raster of image consists of bytes with the luminance values
            // TODO: can avoid set/slice?
            row.set(this.buffer.slice(start, start + width));
        }
        return row;
    };
    HTMLCanvasElementLuminanceSource.prototype.getMatrix = function() {
        return this.buffer;
    };
    HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function() {
        return true;
    };
    HTMLCanvasElementLuminanceSource.prototype.crop = function(left /*int*/ , top /*int*/ , width /*int*/ , height /*int*/ ) {
        _super.prototype.crop.call(this, left, top, width, height);
        return this;
    };
    /**
     * This is always true, since the image is a gray-scale image.
     *
     * @return true
     */ HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function() {
        return true;
    };
    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function() {
        this.rotate(-90);
        return this;
    };
    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function() {
        this.rotate(-45);
        return this;
    };
    HTMLCanvasElementLuminanceSource.prototype.invert = function() {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$InvertedLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__InvertedLuminanceSource$3e$__["InvertedLuminanceSource"](this);
    };
    HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function() {
        if (null === this.tempCanvasElement) {
            var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');
            tempCanvasElement.width = this.canvas.width;
            tempCanvasElement.height = this.canvas.height;
            this.tempCanvasElement = tempCanvasElement;
        }
        return this.tempCanvasElement;
    };
    HTMLCanvasElementLuminanceSource.prototype.rotate = function(angle) {
        var tempCanvasElement = this.getTempCanvasElement();
        if (!tempCanvasElement) {
            throw new Error('Could not create a Canvas element.');
        }
        var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;
        // Calculate and set new dimensions for temp canvas
        var width = this.canvas.width;
        var height = this.canvas.height;
        var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);
        var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);
        tempCanvasElement.width = newWidth;
        tempCanvasElement.height = newHeight;
        var tempContext = tempCanvasElement.getContext('2d');
        if (!tempContext) {
            throw new Error('Could not create a Canvas Context element.');
        }
        // Draw at center of temp canvas to prevent clipping of image data
        tempContext.translate(newWidth / 2, newHeight / 2);
        tempContext.rotate(angleRadians);
        tempContext.drawImage(this.canvas, width / -2, height / -2);
        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);
        return this;
    };
    HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;
    return HTMLCanvasElementLuminanceSource;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$LuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__LuminanceSource$3e$__["LuminanceSource"]);
;
 //# sourceMappingURL=HTMLCanvasElementLuminanceSource.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/common/HTMLVisualMediaElement.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=HTMLVisualMediaElement.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/common/IScannerControls.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=IScannerControls.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/common/navigator-utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * If navigator is present.
 */ __turbopack_context__.s({
    "canEnumerateDevices": (()=>canEnumerateDevices),
    "hasNavigator": (()=>hasNavigator)
});
function hasNavigator() {
    return typeof navigator !== 'undefined';
}
/**
 * If mediaDevices under navigator is supported.
 */ function isMediaDevicesSupported() {
    return hasNavigator() && !!navigator.mediaDevices;
}
function canEnumerateDevices() {
    return !!(isMediaDevicesSupported() && navigator.mediaDevices.enumerateDevices);
} //# sourceMappingURL=navigator-utils.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserCodeReader": (()=>BrowserCodeReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/ArgumentException.js [app-client] (ecmascript) <export default as ArgumentException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$BinaryBitmap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__BinaryBitmap$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/BinaryBitmap.js [app-client] (ecmascript) <export default as BinaryBitmap>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ChecksumException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ChecksumException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/ChecksumException.js [app-client] (ecmascript) <export default as ChecksumException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$DecodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DecodeHintType$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/DecodeHintType.js [app-client] (ecmascript) <export default as DecodeHintType>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$FormatException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__FormatException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/FormatException.js [app-client] (ecmascript) <export default as FormatException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$common$2f$HybridBinarizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HybridBinarizer$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/common/HybridBinarizer.js [app-client] (ecmascript) <export default as HybridBinarizer>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$NotFoundException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__NotFoundException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/NotFoundException.js [app-client] (ecmascript) <export default as NotFoundException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLCanvasElementLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$navigator$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/navigator-utils.js [app-client] (ecmascript)");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    "TURBOPACK unreachable";
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __values = this && this.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
;
;
;
var defaultOptions = {
    delayBetweenScanAttempts: 500,
    delayBetweenScanSuccess: 500,
    tryPlayVideoTimeout: 5000
};
/**
 * Base class for browser code reader.
 */ var BrowserCodeReader = function() {
    /**
     * Creates an instance of BrowserCodeReader.
     * @param {Reader} reader The reader instance to decode the barcode
     * @param hints Holds the hints the user sets for the Reader.
     */ function BrowserCodeReader(reader, hints, options) {
        if (hints === void 0) {
            hints = new Map();
        }
        if (options === void 0) {
            options = {};
        }
        this.reader = reader;
        this.hints = hints;
        this.options = __assign(__assign({}, defaultOptions), options);
    }
    Object.defineProperty(BrowserCodeReader.prototype, "possibleFormats", {
        /**
         * Allows to change the possible formats the decoder should
         * search for while scanning some image. Useful for changing
         * the possible formats during BrowserCodeReader::scan.
         */ set: function(formats) {
            this.hints.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$DecodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DecodeHintType$3e$__["DecodeHintType"].POSSIBLE_FORMATS, formats);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Defines what the videoElement src will be.
     *
     * @param videoElement
     * @param stream The stream to be added as a source.
     */ BrowserCodeReader.addVideoSource = function(videoElement, stream) {
        // Older browsers may not have `srcObject`
        try {
            // @note Throws Exception if interrupted by a new loaded request
            videoElement.srcObject = stream;
        } catch (err) {
            console.error("got interrupted by new loading request");
        }
    };
    /**
     * Enables or disables the torch in a media stream.
     *
     * @experimental This doesn't work across all browsers and is still a Draft.
     */ BrowserCodeReader.mediaStreamSetTorch = function(track, onOff) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            track.applyConstraints({
                                advanced: [
                                    {
                                        fillLightMode: onOff ? 'flash' : 'off',
                                        torch: onOff ? true : false
                                    }
                                ]
                            })
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Checks if the stream has torch support.
     */ BrowserCodeReader.mediaStreamIsTorchCompatible = function(params) {
        var e_1, _a;
        var tracks = params.getVideoTracks();
        try {
            for(var tracks_1 = __values(tracks), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()){
                var track = tracks_1_1.value;
                if (BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(track)) {
                    return true;
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (tracks_1_1 && !tracks_1_1.done && (_a = tracks_1.return)) _a.call(tracks_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return false;
    };
    /**
     *
     * @param track The media stream track that will be checked for compatibility.
     */ BrowserCodeReader.mediaStreamIsTorchCompatibleTrack = function(track) {
        try {
            var capabilities = track.getCapabilities();
            return 'torch' in capabilities;
        } catch (err) {
            // some browsers may not be compatible with ImageCapture
            // so we are ignoring this for now.
            // tslint:disable-next-line:no-console
            console.error(err);
            // tslint:disable-next-line:no-console
            console.warn('Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.');
            return false;
        }
    };
    /**
     * Checks if the given video element is currently playing.
     */ BrowserCodeReader.isVideoPlaying = function(video) {
        return video.currentTime > 0 && !video.paused && video.readyState > 2;
    };
    /**
     * Searches and validates a media element.
     */ BrowserCodeReader.getMediaElement = function(mediaElementId, type) {
        var mediaElement = document.getElementById(mediaElementId);
        if (!mediaElement) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]("element with id '".concat(mediaElementId, "' not found"));
        }
        if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]("element with id '".concat(mediaElementId, "' must be an ").concat(type, " element"));
        }
        return mediaElement;
    };
    /**
     * Receives a source and makes sure to return a Video Element from it or fail.
     */ BrowserCodeReader.createVideoElement = function(videoThingy) {
        if (videoThingy instanceof HTMLVideoElement) {
            return videoThingy;
        }
        if (typeof videoThingy === 'string') {
            return BrowserCodeReader.getMediaElement(videoThingy, 'video');
        }
        if (!videoThingy && typeof document !== 'undefined') {
            var videoElement = document.createElement('video');
            videoElement.width = 200;
            videoElement.height = 200;
            return videoElement;
        }
        throw new Error('Couldn\'t get videoElement from videoSource!');
    };
    /**
     * Receives a source and makes sure to return an Image Element from it or fail.
     */ BrowserCodeReader.prepareImageElement = function(imageSource) {
        if (imageSource instanceof HTMLImageElement) {
            return imageSource;
        }
        if (typeof imageSource === 'string') {
            return BrowserCodeReader.getMediaElement(imageSource, 'img');
        }
        if (typeof imageSource === 'undefined') {
            var imageElement = document.createElement('img');
            imageElement.width = 200;
            imageElement.height = 200;
            return imageElement;
        }
        throw new Error('Couldn\'t get imageElement from imageSource!');
    };
    /**
     * Sets a HTMLVideoElement for scanning or creates a new one.
     *
     * @param videoElem The HTMLVideoElement to be set.
     */ BrowserCodeReader.prepareVideoElement = function(videoElem) {
        var videoElement = BrowserCodeReader.createVideoElement(videoElem);
        // @todo the following lines should not always be done this way, should conditionally
        // change according were we created the element or not
        // Needed for iOS 11
        videoElement.setAttribute('autoplay', 'true');
        videoElement.setAttribute('muted', 'true');
        videoElement.setAttribute('playsinline', 'true');
        return videoElement;
    };
    /**
     * Checks if and HTML image is loaded.
     */ BrowserCodeReader.isImageLoaded = function(img) {
        // During the onload event, IE correctly identifies any images that
        // weren't downloaded as not complete. Others should too. Gecko-based
        // browsers act like NS4 in that they report this incorrectly.
        if (!img.complete) {
            return false;
        }
        // However, they do have two very useful properties: naturalWidth and
        // naturalHeight. These give the true size of the image. If it failed
        // to load, either of these should be zero.
        if (img.naturalWidth === 0) {
            return false;
        }
        // No other way of checking: assume it’s ok.
        return true;
    };
    /**
     * Creates a binaryBitmap based in a canvas.
     *
     * @param canvas HTML canvas element containing the image source draw.
     */ BrowserCodeReader.createBinaryBitmapFromCanvas = function(canvas) {
        var luminanceSource = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLCanvasElementLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HTMLCanvasElementLuminanceSource"](canvas);
        var hybridBinarizer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$common$2f$HybridBinarizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__HybridBinarizer$3e$__["HybridBinarizer"](luminanceSource);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$BinaryBitmap$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__BinaryBitmap$3e$__["BinaryBitmap"](hybridBinarizer);
    };
    /**
     * Overwriting this allows you to manipulate the snapshot image in anyway you want before decode.
     */ BrowserCodeReader.drawImageOnCanvas = function(canvasElementContext, srcElement) {
        canvasElementContext.drawImage(srcElement, 0, 0);
    };
    BrowserCodeReader.getMediaElementDimensions = function(mediaElement) {
        if (mediaElement instanceof HTMLVideoElement) {
            return {
                height: mediaElement.videoHeight,
                width: mediaElement.videoWidth
            };
        }
        if (mediaElement instanceof HTMLImageElement) {
            return {
                height: mediaElement.naturalHeight || mediaElement.height,
                width: mediaElement.naturalWidth || mediaElement.width
            };
        }
        throw new Error('Couldn\'t find the Source\'s dimensions!');
    };
    /**
     * 🖌 Prepares the canvas for capture and scan frames.
     */ BrowserCodeReader.createCaptureCanvas = function(mediaElement) {
        if (!mediaElement) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('Cannot create a capture canvas without a media element.');
        }
        if (typeof document === 'undefined') {
            throw new Error('The page "Document" is undefined, make sure you\'re running in a browser.');
        }
        var canvasElement = document.createElement('canvas');
        var _a = BrowserCodeReader.getMediaElementDimensions(mediaElement), width = _a.width, height = _a.height;
        canvasElement.style.width = width + 'px';
        canvasElement.style.height = height + 'px';
        canvasElement.width = width;
        canvasElement.height = height;
        return canvasElement;
    };
    /**
     * Just tries to play the video and logs any errors.
     * The play call is only made is the video is not already playing.
     */ BrowserCodeReader.tryPlayVideo = function(videoElement) {
        return __awaiter(this, void 0, void 0, function() {
            var error_1;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (videoElement === null || videoElement === void 0 ? void 0 : videoElement.ended) {
                            // tslint:disable-next-line:no-console
                            console.error('Trying to play video that has ended.');
                            return [
                                2 /*return*/ ,
                                false
                            ];
                        }
                        if (BrowserCodeReader.isVideoPlaying(videoElement)) {
                            // tslint:disable-next-line:no-console
                            console.warn('Trying to play video that is already playing.');
                            return [
                                2 /*return*/ ,
                                true
                            ];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            videoElement.play()
                        ];
                    case 2:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            true
                        ];
                    case 3:
                        error_1 = _a.sent();
                        // tslint:disable-next-line:no-console
                        console.warn('It was not possible to play the video.', error_1);
                        return [
                            2 /*return*/ ,
                            false
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Creates a canvas and draws the current image frame from the media element on it.
     *
     * @param mediaElement HTML media element to extract an image frame from.
     */ BrowserCodeReader.createCanvasFromMediaElement = function(mediaElement) {
        var canvas = BrowserCodeReader.createCaptureCanvas(mediaElement);
        var ctx = canvas.getContext('2d');
        if (!ctx) {
            throw new Error('Couldn\'t find Canvas 2D Context.');
        }
        BrowserCodeReader.drawImageOnCanvas(ctx, mediaElement);
        return canvas;
    };
    /**
     * Creates a binaryBitmap based in some image source.
     *
     * @param mediaElement HTML element containing drawable image source.
     */ BrowserCodeReader.createBinaryBitmapFromMediaElem = function(mediaElement) {
        var canvas = BrowserCodeReader.createCanvasFromMediaElement(mediaElement);
        return BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);
    };
    BrowserCodeReader.destroyImageElement = function(imageElement) {
        imageElement.src = '';
        imageElement.removeAttribute('src');
        imageElement = undefined;
    };
    /**
     * Lists all the available video input devices.
     */ BrowserCodeReader.listVideoInputDevices = function() {
        return __awaiter(this, void 0, void 0, function() {
            var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;
            var e_2, _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$navigator$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hasNavigator"])()) {
                            throw new Error('Can\'t enumerate devices, navigator is not present.');
                        }
                        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$navigator$2d$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["canEnumerateDevices"])()) {
                            throw new Error('Can\'t enumerate devices, method not supported.');
                        }
                        return [
                            4 /*yield*/ ,
                            navigator.mediaDevices.enumerateDevices()
                        ];
                    case 1:
                        devices = _b.sent();
                        videoDevices = [];
                        try {
                            for(devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()){
                                device = devices_1_1.value;
                                kind = device.kind === 'video' ? 'videoinput' : device.kind;
                                if (kind !== 'videoinput') {
                                    continue;
                                }
                                deviceId = device.deviceId || device.id;
                                label = device.label || "Video device ".concat(videoDevices.length + 1);
                                groupId = device.groupId;
                                videoDevice = {
                                    deviceId: deviceId,
                                    label: label,
                                    kind: kind,
                                    groupId: groupId
                                };
                                videoDevices.push(videoDevice);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally{
                            try {
                                if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);
                            } finally{
                                if (e_2) throw e_2.error;
                            }
                        }
                        return [
                            2 /*return*/ ,
                            videoDevices
                        ];
                }
            });
        });
    };
    /**
     * Let's you find a device using it's Id.
     */ BrowserCodeReader.findDeviceById = function(deviceId) {
        return __awaiter(this, void 0, void 0, function() {
            var devices;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.listVideoInputDevices()
                        ];
                    case 1:
                        devices = _a.sent();
                        if (!devices) {
                            return [
                                2 /*return*/ 
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            devices.find(function(x) {
                                return x.deviceId === deviceId;
                            })
                        ];
                }
            });
        });
    };
    /**
     * Unbinds a HTML video src property.
     */ BrowserCodeReader.cleanVideoSource = function(videoElement) {
        if (!videoElement) {
            return;
        }
        // forgets about that element 😢
        try {
            videoElement.srcObject = null;
        } catch (err) {
            videoElement.src = '';
        }
        if (videoElement) {
            videoElement.removeAttribute('src');
        }
    };
    /**
     * Stops all media streams that are created.
     */ BrowserCodeReader.releaseAllStreams = function() {
        if (BrowserCodeReader.streamTracker.length !== 0) {
            // tslint:disable-next-line:no-console
            BrowserCodeReader.streamTracker.forEach(function(mediaStream) {
                mediaStream.getTracks().forEach(function(track) {
                    return track.stop();
                });
            });
        }
        BrowserCodeReader.streamTracker = [];
    };
    /**
     * Waits for a video to load and then hits play on it.
     * To accomplish that, it binds listeners and callbacks to the video element.
     *
     * @param element The video element.
     * @param callbackFn Callback invoked when the video is played.
     */ BrowserCodeReader.playVideoOnLoadAsync = function(element, timeout) {
        return __awaiter(this, void 0, void 0, function() {
            var isPlaying;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.tryPlayVideo(element)
                        ];
                    case 1:
                        isPlaying = _a.sent();
                        if (isPlaying) {
                            return [
                                2 /*return*/ ,
                                true
                            ];
                        }
                        return [
                            2 /*return*/ ,
                            new Promise(function(resolve, reject) {
                                // waits 3 seconds or rejects.
                                var timeoutId = setTimeout(function() {
                                    if (BrowserCodeReader.isVideoPlaying(element)) {
                                        // if video is playing then we had success, just ignore
                                        return;
                                    }
                                    reject(false);
                                    element.removeEventListener('canplay', videoCanPlayListener);
                                }, timeout);
                                /**
                                 * Should contain the current registered listener for video loaded-metadata,
                                 * used to unregister that listener when needed.
                                 */ var videoCanPlayListener = function() {
                                    BrowserCodeReader.tryPlayVideo(element).then(function(hasPlayed) {
                                        clearTimeout(timeoutId);
                                        element.removeEventListener('canplay', videoCanPlayListener);
                                        resolve(hasPlayed);
                                    });
                                };
                                // both should be unregistered after called
                                element.addEventListener('canplay', videoCanPlayListener);
                            })
                        ];
                }
            });
        });
    };
    /**
     * Sets the new stream and request a new decoding-with-delay.
     *
     * @param stream The stream to be shown in the video element.
     * @param decodeFn A callback for the decode method.
     */ BrowserCodeReader.attachStreamToVideo = function(stream, preview, previewPlayTimeout) {
        if (previewPlayTimeout === void 0) {
            previewPlayTimeout = 5000;
        }
        return __awaiter(this, void 0, void 0, function() {
            var videoElement;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        videoElement = BrowserCodeReader.prepareVideoElement(preview);
                        BrowserCodeReader.addVideoSource(videoElement, stream);
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.playVideoOnLoadAsync(videoElement, previewPlayTimeout)
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            videoElement
                        ];
                }
            });
        });
    };
    /**
     * Returns a Promise that resolves when the given image element loads.
     */ BrowserCodeReader._waitImageLoad = function(element) {
        return new Promise(function(resolve, reject) {
            var timeout = 10000;
            // waits 10 seconds or rejects.
            var timeoutId = setTimeout(function() {
                if (BrowserCodeReader.isImageLoaded(element)) {
                    // if video is playing then we had success, just ignore
                    return;
                }
                // removes the listener
                element.removeEventListener('load', imageLoadedListener);
                // rejects the load
                reject();
            }, timeout);
            var imageLoadedListener = function() {
                clearTimeout(timeoutId);
                // removes the listener
                element.removeEventListener('load', imageLoadedListener);
                // resolves the load
                resolve();
            };
            element.addEventListener('load', imageLoadedListener);
        });
    };
    /**
     * Checks if the `callbackFn` is defined, otherwise throws.
     */ BrowserCodeReader.checkCallbackFnOrThrow = function(callbackFn) {
        if (!callbackFn) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('`callbackFn` is a required parameter, you cannot capture results without it.');
        }
    };
    /**
     * Standard method to dispose a media stream object.
     */ BrowserCodeReader.disposeMediaStream = function(stream) {
        stream.getVideoTracks().forEach(function(x) {
            return x.stop();
        });
        stream = undefined;
    };
    /**
     * Gets the BinaryBitmap for ya! (and decodes it)
     */ BrowserCodeReader.prototype.decode = function(element) {
        // get binary bitmap for decode function
        var canvas = BrowserCodeReader.createCanvasFromMediaElement(element);
        return this.decodeFromCanvas(canvas);
    };
    /**
     * Call the encapsulated readers decode
     */ BrowserCodeReader.prototype.decodeBitmap = function(binaryBitmap) {
        return this.reader.decode(binaryBitmap, this.hints);
    };
    /**
     * Decodes some barcode from a canvas!
     */ BrowserCodeReader.prototype.decodeFromCanvas = function(canvas) {
        var binaryBitmap = BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);
        return this.decodeBitmap(binaryBitmap);
    };
    /**
     * Decodes something from an image HTML element.
     */ BrowserCodeReader.prototype.decodeFromImageElement = function(source) {
        return __awaiter(this, void 0, void 0, function() {
            var element;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!source) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('An image element must be provided.');
                        }
                        element = BrowserCodeReader.prepareImageElement(source);
                        return [
                            4 /*yield*/ ,
                            this._decodeOnLoadImage(element)
                        ];
                    case 1:
                        // onLoad will remove it's callback once done
                        // we do not need to dispose or destroy the image
                        // since it came from the user
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Decodes an image from a URL.
     */ BrowserCodeReader.prototype.decodeFromImageUrl = function(url) {
        return __awaiter(this, void 0, void 0, function() {
            var element;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!url) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('An URL must be provided.');
                        }
                        element = BrowserCodeReader.prepareImageElement();
                        // loads the image.
                        element.src = url;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.decodeFromImageElement(element)
                        ];
                    case 2:
                        // it waits the task so we can destroy the created image after
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 3:
                        // we created this element, so we destroy it
                        BrowserCodeReader.destroyImageElement(element);
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Continuously tries to decode the barcode from a stream obtained from the given constraints
     * while showing the video in the specified video element.
     *
     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from
     * @param {string|HTMLVideoElement} [previewElem] the video element in page where to show the video while
     *  decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in
     *  which case no video will be shown.
     */ BrowserCodeReader.prototype.decodeFromConstraints = function(constraints, previewElem, callbackFn) {
        return __awaiter(this, void 0, void 0, function() {
            var stream, error_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
                        return [
                            4 /*yield*/ ,
                            this.getUserMedia(constraints)
                        ];
                    case 1:
                        stream = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.decodeFromStream(stream, previewElem, callbackFn)
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 4:
                        error_2 = _a.sent();
                        BrowserCodeReader.disposeMediaStream(stream);
                        throw error_2;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * In one attempt, tries to decode the barcode from a stream obtained from the given constraints
     * while showing the video in the specified video element.
     *
     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from
     * @param {string|HTMLVideoElement} [preview] the video element in page where to show the video
     *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,
     *  in which case no video will be shown.
     */ BrowserCodeReader.prototype.decodeFromStream = function(stream, preview, callbackFn) {
        return __awaiter(this, void 0, void 0, function() {
            var timeout, video, finalizeCallback, originalControls, videoTracks, controls, isTorchAvailable, torchTrack_1, switchTorch_1;
            var _this = this;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
                        timeout = this.options.tryPlayVideoTimeout;
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.attachStreamToVideo(stream, preview, timeout)
                        ];
                    case 1:
                        video = _a.sent();
                        finalizeCallback = function() {
                            // stops video tracks and releases the stream reference
                            BrowserCodeReader.disposeMediaStream(stream);
                            // this video was just a preview, so in order
                            // to release the stream we gotta stop showing
                            // it (the stream) in the video element
                            BrowserCodeReader.cleanVideoSource(video);
                        };
                        originalControls = this.scan(video, callbackFn, finalizeCallback);
                        videoTracks = stream.getVideoTracks();
                        controls = __assign(__assign({}, originalControls), {
                            stop: function() {
                                originalControls.stop();
                            },
                            streamVideoConstraintsApply: function(constraints, trackFilter) {
                                return __awaiter(this, void 0, void 0, function() {
                                    var tracks, tracks_2, tracks_2_1, track, e_3_1;
                                    var e_3, _a;
                                    return __generator(this, function(_b) {
                                        switch(_b.label){
                                            case 0:
                                                tracks = trackFilter ? videoTracks.filter(trackFilter) : videoTracks;
                                                _b.label = 1;
                                            case 1:
                                                _b.trys.push([
                                                    1,
                                                    6,
                                                    7,
                                                    8
                                                ]);
                                                tracks_2 = __values(tracks), tracks_2_1 = tracks_2.next();
                                                _b.label = 2;
                                            case 2:
                                                if (!!tracks_2_1.done) return [
                                                    3 /*break*/ ,
                                                    5
                                                ];
                                                track = tracks_2_1.value;
                                                return [
                                                    4 /*yield*/ ,
                                                    track.applyConstraints(constraints)
                                                ];
                                            case 3:
                                                _b.sent();
                                                _b.label = 4;
                                            case 4:
                                                tracks_2_1 = tracks_2.next();
                                                return [
                                                    3 /*break*/ ,
                                                    2
                                                ];
                                            case 5:
                                                return [
                                                    3 /*break*/ ,
                                                    8
                                                ];
                                            case 6:
                                                e_3_1 = _b.sent();
                                                e_3 = {
                                                    error: e_3_1
                                                };
                                                return [
                                                    3 /*break*/ ,
                                                    8
                                                ];
                                            case 7:
                                                try {
                                                    if (tracks_2_1 && !tracks_2_1.done && (_a = tracks_2.return)) _a.call(tracks_2);
                                                } finally{
                                                    if (e_3) throw e_3.error;
                                                }
                                                return [
                                                    7 /*endfinally*/ 
                                                ];
                                            case 8:
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            },
                            streamVideoConstraintsGet: function(trackFilter) {
                                return videoTracks.find(trackFilter).getConstraints();
                            },
                            streamVideoSettingsGet: function(trackFilter) {
                                return videoTracks.find(trackFilter).getSettings();
                            },
                            streamVideoCapabilitiesGet: function(trackFilter) {
                                return videoTracks.find(trackFilter).getCapabilities();
                            }
                        });
                        isTorchAvailable = BrowserCodeReader.mediaStreamIsTorchCompatible(stream);
                        if (isTorchAvailable) {
                            torchTrack_1 = videoTracks === null || videoTracks === void 0 ? void 0 : videoTracks.find(function(t) {
                                return BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(t);
                            });
                            switchTorch_1 = function(onOff) {
                                return __awaiter(_this, void 0, void 0, function() {
                                    return __generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                return [
                                                    4 /*yield*/ ,
                                                    BrowserCodeReader.mediaStreamSetTorch(torchTrack_1, onOff)
                                                ];
                                            case 1:
                                                _a.sent();
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            };
                            controls.switchTorch = switchTorch_1;
                            controls.stop = function() {
                                return __awaiter(_this, void 0, void 0, function() {
                                    return __generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                originalControls.stop();
                                                return [
                                                    4 /*yield*/ ,
                                                    switchTorch_1(false)
                                                ];
                                            case 1:
                                                _a.sent();
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            };
                        }
                        return [
                            2 /*return*/ ,
                            controls
                        ];
                }
            });
        });
    };
    /**
     * Continuously tries to decode the barcode from the device specified by device while showing
     * the video in the specified video element.
     *
     * @param {string|null} [deviceId] the id of one of the devices obtained after calling
     *  getVideoInputDevices. Can be undefined, in this case it will decode from one of the
     *  available devices, preferring the main camera (environment facing) if available.
     * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video
     *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,
     *  in which case no video will be shown.
     */ BrowserCodeReader.prototype.decodeFromVideoDevice = function(deviceId, previewElem, callbackFn) {
        return __awaiter(this, void 0, void 0, function() {
            var videoConstraints, constraints;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
                        if (!deviceId) {
                            videoConstraints = {
                                facingMode: 'environment'
                            };
                        } else {
                            videoConstraints = {
                                deviceId: {
                                    exact: deviceId
                                }
                            };
                        }
                        constraints = {
                            video: videoConstraints
                        };
                        return [
                            4 /*yield*/ ,
                            this.decodeFromConstraints(constraints, previewElem, callbackFn)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Decodes something from an image HTML element.
     */ BrowserCodeReader.prototype.decodeFromVideoElement = function(source, callbackFn) {
        return __awaiter(this, void 0, void 0, function() {
            var element, timeout;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
                        if (!source) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('A video element must be provided.');
                        }
                        element = BrowserCodeReader.prepareVideoElement(source);
                        timeout = this.options.tryPlayVideoTimeout;
                        // plays the video
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.playVideoOnLoadAsync(element, timeout)
                        ];
                    case 1:
                        // plays the video
                        _a.sent();
                        // starts decoding after played the video
                        return [
                            2 /*return*/ ,
                            this.scan(element, callbackFn)
                        ];
                }
            });
        });
    };
    /**
     * Decodes a video from a URL until it ends.
     */ BrowserCodeReader.prototype.decodeFromVideoUrl = function(url, callbackFn) {
        return __awaiter(this, void 0, void 0, function() {
            var element, finalizeCallback, timeout, controls;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
                        if (!url) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('An URL must be provided.');
                        }
                        element = BrowserCodeReader.prepareVideoElement();
                        // starts loading the video
                        element.src = url;
                        finalizeCallback = function() {
                            // dispose created video element
                            BrowserCodeReader.cleanVideoSource(element);
                        };
                        timeout = this.options.tryPlayVideoTimeout;
                        // plays the video
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.playVideoOnLoadAsync(element, timeout)
                        ];
                    case 1:
                        // plays the video
                        _a.sent();
                        controls = this.scan(element, callbackFn, finalizeCallback);
                        return [
                            2 /*return*/ ,
                            controls
                        ];
                }
            });
        });
    };
    /**
     * In one attempt, tries to decode the barcode from a stream obtained from the given
     * constraints while showing the video in the specified video element.
     *
     * @param constraints the media stream constraints to get s valid media stream to decode from
     * @param videoSource the video element in page where to show the video while decoding.
     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,
     *  in which case no video will be shown.
     *  The decoding result.
     */ BrowserCodeReader.prototype.decodeOnceFromConstraints = function(constraints, videoSource) {
        return __awaiter(this, void 0, void 0, function() {
            var stream;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.getUserMedia(constraints)
                        ];
                    case 1:
                        stream = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.decodeOnceFromStream(stream, videoSource)
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * In one attempt, tries to decode the barcode from a stream obtained from the given
     * constraints while showing the video in the specified video element.
     *
     * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from
     * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding.
     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,
     *  in which case no video will be shown.
     */ BrowserCodeReader.prototype.decodeOnceFromStream = function(stream, preview) {
        return __awaiter(this, void 0, void 0, function() {
            var receivedPreview, video, result;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        receivedPreview = Boolean(preview);
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.attachStreamToVideo(stream, preview)
                        ];
                    case 1:
                        video = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            ,
                            4,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.scanOneResult(video)
                        ];
                    case 3:
                        result = _a.sent();
                        return [
                            2 /*return*/ ,
                            result
                        ];
                    case 4:
                        if (!receivedPreview) {
                            BrowserCodeReader.cleanVideoSource(video);
                        }
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * In one attempt, tries to decode the barcode from the device specified by deviceId
     * while showing the video in the specified video element.
     *
     * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices.
     *  Can be undefined, in this case it will decode from one of the available devices,
     *  preferring the main camera (environment facing) if available.
     * @param videoSource the video element in page where to show the video while decoding.
     *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,
     *  in which case no video will be shown.
     */ BrowserCodeReader.prototype.decodeOnceFromVideoDevice = function(deviceId, videoSource) {
        return __awaiter(this, void 0, void 0, function() {
            var videoConstraints, constraints;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!deviceId) {
                            videoConstraints = {
                                facingMode: 'environment'
                            };
                        } else {
                            videoConstraints = {
                                deviceId: {
                                    exact: deviceId
                                }
                            };
                        }
                        constraints = {
                            video: videoConstraints
                        };
                        return [
                            4 /*yield*/ ,
                            this.decodeOnceFromConstraints(constraints, videoSource)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Decodes something from an image HTML element.
     */ BrowserCodeReader.prototype.decodeOnceFromVideoElement = function(source) {
        return __awaiter(this, void 0, void 0, function() {
            var element, timeout;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!source) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('A video element must be provided.');
                        }
                        element = BrowserCodeReader.prepareVideoElement(source);
                        timeout = this.options.tryPlayVideoTimeout;
                        // plays the video
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader.playVideoOnLoadAsync(element, timeout)
                        ];
                    case 1:
                        // plays the video
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.scanOneResult(element)
                        ];
                    case 2:
                        // starts decoding after played the video
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                }
            });
        });
    };
    /**
     * Decodes a video from a URL.
     */ BrowserCodeReader.prototype.decodeOnceFromVideoUrl = function(url) {
        return __awaiter(this, void 0, void 0, function() {
            var element, task;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!url) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ArgumentException$3e$__["ArgumentException"]('An URL must be provided.');
                        }
                        element = BrowserCodeReader.prepareVideoElement();
                        // starts loading the video
                        element.src = url;
                        task = this.decodeOnceFromVideoElement(element);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            task
                        ];
                    case 2:
                        // it waits the task so we can destroy the created image after
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 3:
                        // we created this element, so we destroy it
                        BrowserCodeReader.cleanVideoSource(element);
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Tries to decode from the video input until it finds some value.
     */ BrowserCodeReader.prototype.scanOneResult = function(element, retryIfNotFound, retryIfChecksumError, retryIfFormatError) {
        var _this = this;
        if (retryIfNotFound === void 0) {
            retryIfNotFound = true;
        }
        if (retryIfChecksumError === void 0) {
            retryIfChecksumError = true;
        }
        if (retryIfFormatError === void 0) {
            retryIfFormatError = true;
        }
        return new Promise(function(resolve, reject) {
            // reuses the scan API, but returns at the first successful result
            _this.scan(element, function(result, error, controls) {
                if (result) {
                    // good result, returning
                    resolve(result);
                    controls.stop();
                    return;
                }
                if (error) {
                    // checks if it should retry
                    if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$NotFoundException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__NotFoundException$3e$__["NotFoundException"] && retryIfNotFound) {
                        return;
                    }
                    if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ChecksumException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ChecksumException$3e$__["ChecksumException"] && retryIfChecksumError) {
                        return;
                    }
                    if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$FormatException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__FormatException$3e$__["FormatException"] && retryIfFormatError) {
                        return;
                    }
                    // not re-trying
                    controls.stop(); // stops scan loop
                    reject(error); // returns the error
                }
            });
        });
    };
    /**
     * Continuously decodes from video input.
     *
     * @param element HTML element to scan/decode from. It will not be disposed or destroyed.
     * @param callbackFn Called after every scan attempt, being it successful or errored.
     * @param finalizeCallback Called after scan process reaches the end or stop is called.
     */ BrowserCodeReader.prototype.scan = function(element, callbackFn, finalizeCallback) {
        var _this = this;
        BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);
        /**
         * The HTML canvas element, used to draw the video or image's frame for decoding.
         */ var captureCanvas = BrowserCodeReader.createCaptureCanvas(element);
        /**
         * The HTML canvas element context.
         */ var captureCanvasContext;
        try {
            captureCanvasContext = captureCanvas.getContext('2d', {
                willReadFrequently: true
            });
        } catch (e) {
            captureCanvasContext = captureCanvas.getContext('2d');
        }
        // cannot proceed w/o this
        if (!captureCanvasContext) {
            throw new Error('Couldn\'t create canvas for visual element scan.');
        }
        var disposeCanvas = function() {
            captureCanvasContext = undefined;
            captureCanvas = undefined;
        };
        var stopScan = false;
        var lastTimeoutId;
        // can be called to break the scan loop
        var stop = function() {
            stopScan = true;
            clearTimeout(lastTimeoutId);
            disposeCanvas();
            if (finalizeCallback) {
                finalizeCallback();
            }
        };
        // created for extensibility
        var controls = {
            stop: stop
        };
        // this async loop allows infinite (or almost? maybe) scans
        var loop = function() {
            if (stopScan) {
                // no need to clear timeouts as none was create yet in this scope.
                return;
            }
            try {
                BrowserCodeReader.drawImageOnCanvas(captureCanvasContext, element);
                var result = _this.decodeFromCanvas(captureCanvas);
                callbackFn(result, undefined, controls);
                lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanSuccess);
            } catch (error) {
                callbackFn(undefined, error, controls);
                var isChecksumError = error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$ChecksumException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__ChecksumException$3e$__["ChecksumException"];
                var isFormatError = error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$FormatException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__FormatException$3e$__["FormatException"];
                var isNotFound = error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$NotFoundException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__NotFoundException$3e$__["NotFoundException"];
                if (isChecksumError || isFormatError || isNotFound) {
                    // trying again
                    lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanAttempts);
                    return;
                }
                // not trying again
                disposeCanvas();
                if (finalizeCallback) {
                    finalizeCallback(error);
                }
            }
        };
        // starts the async loop
        loop();
        return controls;
    };
    /**
     * Waits for the image to load and then tries to decode it.
     */ BrowserCodeReader.prototype._decodeOnLoadImage = function(element) {
        return __awaiter(this, void 0, void 0, function() {
            var isImageLoaded;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        isImageLoaded = BrowserCodeReader.isImageLoaded(element);
                        if (!!isImageLoaded) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            BrowserCodeReader._waitImageLoad(element)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this.decode(element)
                        ];
                }
            });
        });
    };
    /**
     * Get MediaStream from browser to be used.
     * @param constraints constraints the media stream constraints to get s valid media stream to decode from.
     * @private For private use.
     */ BrowserCodeReader.prototype.getUserMedia = function(constraints) {
        return __awaiter(this, void 0, void 0, function() {
            var stream;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            navigator.mediaDevices.getUserMedia(constraints)
                        ];
                    case 1:
                        stream = _a.sent();
                        BrowserCodeReader.streamTracker.push(stream);
                        return [
                            2 /*return*/ ,
                            stream
                        ];
                }
            });
        });
    };
    /**
     * Keeps track to created media streams.
     * @private there is no need this array to be accessible from outside.
     */ BrowserCodeReader.streamTracker = [];
    return BrowserCodeReader;
}();
;
 //# sourceMappingURL=BrowserCodeReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserAztecCodeReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserAztecCodeReader": (()=>BrowserAztecCodeReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$aztec$2f$AztecReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__AztecCodeReader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/aztec/AztecReader.js [app-client] (ecmascript) <export default as AztecCodeReader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
/**
 * Aztec Code reader to use from browser.
 *
 * @class BrowserAztecCodeReader
 * @extends {BrowserCodeReader}
 */ var BrowserAztecCodeReader = function(_super) {
    __extends(BrowserAztecCodeReader, _super);
    /**
     * Creates an instance of BrowserAztecCodeReader.
     */ function BrowserAztecCodeReader(hints, options) {
        return _super.call(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$aztec$2f$AztecReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__AztecCodeReader$3e$__["AztecCodeReader"](), hints, options) || this;
    }
    return BrowserAztecCodeReader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserAztecCodeReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatOneDReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserMultiFormatOneDReader": (()=>BrowserMultiFormatOneDReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$oned$2f$MultiFormatOneDReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiFormatOneDReader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/oned/MultiFormatOneDReader.js [app-client] (ecmascript) <export default as MultiFormatOneDReader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
/**
 * Reader to be used for any One Dimension type barcode.
 */ var BrowserMultiFormatOneDReader = function(_super) {
    __extends(BrowserMultiFormatOneDReader, _super);
    /**
     * Creates an instance of BrowserBarcodeReader.
     * @param {Map<DecodeHintType, any>} hints?
     * @param options
     */ function BrowserMultiFormatOneDReader(hints, options) {
        return _super.call(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$oned$2f$MultiFormatOneDReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiFormatOneDReader$3e$__["MultiFormatOneDReader"](hints), hints, options) || this;
    }
    return BrowserMultiFormatOneDReader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserMultiFormatOneDReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserDatamatrixCodeReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserDatamatrixCodeReader": (()=>BrowserDatamatrixCodeReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$datamatrix$2f$DataMatrixReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DataMatrixReader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/datamatrix/DataMatrixReader.js [app-client] (ecmascript) <export default as DataMatrixReader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
/**
 * QR Code reader to use from browser.
 */ var BrowserDatamatrixCodeReader = function(_super) {
    __extends(BrowserDatamatrixCodeReader, _super);
    /**
     * Creates an instance of BrowserQRCodeReader.
     */ function BrowserDatamatrixCodeReader(hints, options) {
        return _super.call(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$datamatrix$2f$DataMatrixReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DataMatrixReader$3e$__["DataMatrixReader"](), hints, options) || this;
    }
    return BrowserDatamatrixCodeReader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserDatamatrixCodeReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserMultiFormatReader": (()=>BrowserMultiFormatReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$DecodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DecodeHintType$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/DecodeHintType.js [app-client] (ecmascript) <export default as DecodeHintType>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$MultiFormatReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiFormatReader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/MultiFormatReader.js [app-client] (ecmascript) <export default as MultiFormatReader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
var BrowserMultiFormatReader = function(_super) {
    __extends(BrowserMultiFormatReader, _super);
    function BrowserMultiFormatReader(hints, options) {
        var _this = this;
        var reader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$MultiFormatReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__MultiFormatReader$3e$__["MultiFormatReader"]();
        reader.setHints(hints);
        _this = _super.call(this, reader, hints, options) || this;
        _this.reader = reader;
        return _this;
    }
    Object.defineProperty(BrowserMultiFormatReader.prototype, "possibleFormats", {
        set: function(formats) {
            this.hints.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$DecodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__DecodeHintType$3e$__["DecodeHintType"].POSSIBLE_FORMATS, formats);
            this.reader.setHints(this.hints);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Overwrite decodeBitmap to call decodeWithState, which will pay
     * attention to the hints set in the constructor function
     */ BrowserMultiFormatReader.prototype.decodeBitmap = function(binaryBitmap) {
        return this.reader.decodeWithState(binaryBitmap);
    };
    /**
     * Allows to change hints in runtime.
     */ BrowserMultiFormatReader.prototype.setHints = function(hints) {
        this.hints = hints;
        this.reader.setHints(this.hints);
    };
    return BrowserMultiFormatReader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserMultiFormatReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserPDF417Reader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserPDF417Reader": (()=>BrowserPDF417Reader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$pdf417$2f$PDF417Reader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__PDF417Reader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/pdf417/PDF417Reader.js [app-client] (ecmascript) <export default as PDF417Reader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
/**
 * QR Code reader to use from browser.
 */ var BrowserPDF417Reader = function(_super) {
    __extends(BrowserPDF417Reader, _super);
    /**
     * Creates an instance of BrowserPDF417Reader.
     */ function BrowserPDF417Reader(hints, options) {
        return _super.call(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$pdf417$2f$PDF417Reader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__PDF417Reader$3e$__["PDF417Reader"](), hints, options) || this;
    }
    return BrowserPDF417Reader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserPDF417Reader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/BrowserQRCodeReader.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserQRCodeReader": (()=>BrowserQRCodeReader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$QRCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeReader$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/qrcode/QRCodeReader.js [app-client] (ecmascript) <export default as QRCodeReader>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
;
;
/**
 * QR Code reader to use from browser.
 */ var BrowserQRCodeReader = function(_super) {
    __extends(BrowserQRCodeReader, _super);
    /**
     * Creates an instance of BrowserQRCodeReader.
     */ function BrowserQRCodeReader(hints, options) {
        return _super.call(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$QRCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeReader$3e$__["QRCodeReader"](), hints, options) || this;
    }
    return BrowserQRCodeReader;
}(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BrowserCodeReader"]);
;
 //# sourceMappingURL=BrowserQRCodeReader.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/readers/IBrowserCodeReaderOptions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=IBrowserCodeReaderOptions.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/writers/BrowserCodeSvgWriter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserCodeSvgWriter": (()=>BrowserCodeSvgWriter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/EncodeHintType.js [app-client] (ecmascript) <export default as EncodeHintType>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/IllegalArgumentException.js [app-client] (ecmascript) <export default as IllegalArgumentException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalStateException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalStateException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/IllegalStateException.js [app-client] (ecmascript) <export default as IllegalStateException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/qrcode/decoder/ErrorCorrectionLevel.js [app-client] (ecmascript) <export default as QRCodeDecoderErrorCorrectionLevel>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$encoder$2f$Encoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeEncoder$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/qrcode/encoder/Encoder.js [app-client] (ecmascript) <export default as QRCodeEncoder>");
;
var svgNs = 'http://www.w3.org/2000/svg';
/**/ var BrowserCodeSvgWriter = function() {
    /**
     * Constructs. 😉
     */ function BrowserCodeSvgWriter(containerElement) {
        if (typeof containerElement === 'string') {
            var container = document.getElementById(containerElement);
            if (!container) {
                throw new Error("Could not find a Container element with '".concat(containerElement, "'."));
            }
            this.containerElement = container;
        } else {
            this.containerElement = containerElement;
        }
    }
    /**
     * Writes the QR code to a SVG and renders it in the container.
     */ BrowserCodeSvgWriter.prototype.write = function(contents, width, height, hints) {
        if (contents.length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__["IllegalArgumentException"]('Found empty contents');
        }
        if (width < 0 || height < 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__["IllegalArgumentException"]('Requested dimensions are too small: ' + width + 'x' + height);
        }
        var quietZone = hints && hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].MARGIN) !== undefined ? Number.parseInt(hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].MARGIN).toString(), 10) : BrowserCodeSvgWriter.QUIET_ZONE_SIZE;
        var code = this.encode(hints, contents);
        return this.renderResult(code, width, height, quietZone);
    };
    /**
     * Creates a SVG element.
     */ BrowserCodeSvgWriter.prototype.createSVGElement = function(w, h) {
        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'svg');
        el.setAttributeNS(svgNs, 'width', h.toString());
        el.setAttributeNS(svgNs, 'height', w.toString());
        return el;
    };
    /**
     * Creates a SVG rect.
     */ BrowserCodeSvgWriter.prototype.createSvgPathPlaceholderElement = function(w, h) {
        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'path');
        el.setAttributeNS(svgNs, 'd', "M0 0h".concat(w, "v").concat(h, "H0z"));
        el.setAttributeNS(svgNs, 'fill', 'none');
        return el;
    };
    /**
     * Creates a SVG rect.
     */ BrowserCodeSvgWriter.prototype.createSvgRectElement = function(x, y, w, h) {
        var el = document.createElementNS(BrowserCodeSvgWriter.SVG_NS, 'rect');
        el.setAttributeNS(svgNs, 'x', x.toString());
        el.setAttributeNS(svgNs, 'y', y.toString());
        el.setAttributeNS(svgNs, 'height', w.toString());
        el.setAttributeNS(svgNs, 'width', h.toString());
        el.setAttributeNS(svgNs, 'fill', '#000000');
        return el;
    };
    /**
     * Encodes the content to a Barcode type.
     */ BrowserCodeSvgWriter.prototype.encode = function(hints, contents) {
        var errorCorrectionLevel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__["QRCodeDecoderErrorCorrectionLevel"].L;
        if (hints && hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].ERROR_CORRECTION) !== undefined) {
            var correctionStr = hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].ERROR_CORRECTION).toString();
            errorCorrectionLevel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__["QRCodeDecoderErrorCorrectionLevel"].fromString(correctionStr);
        }
        var code = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$encoder$2f$Encoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeEncoder$3e$__["QRCodeEncoder"].encode(contents, errorCorrectionLevel, hints);
        return code;
    };
    /**
     * Renders the SVG in the container.
     *
     * @note the input matrix uses 0 == white, 1 == black. The output matrix
     *  uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).
     */ BrowserCodeSvgWriter.prototype.renderResult = function(code, width /*int*/ , height /*int*/ , quietZone /*int*/ ) {
        // if (this.format && format != this.format) {
        //   throw new IllegalArgumentException("Can only encode QR_CODE, but got " + format)
        // }
        var input = code.getMatrix();
        if (input === null) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalStateException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalStateException$3e$__["IllegalStateException"]();
        }
        var inputWidth = input.getWidth();
        var inputHeight = input.getHeight();
        var qrWidth = inputWidth + quietZone * 2;
        var qrHeight = inputHeight + quietZone * 2;
        var outputWidth = Math.max(width, qrWidth);
        var outputHeight = Math.max(height, qrHeight);
        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested
        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.
        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will
        // handle all the padding from 100x100 (the actual QR) up to 200x160.
        var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
        var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
        var svgElement = this.createSVGElement(outputWidth, outputHeight);
        var placeholder = this.createSvgPathPlaceholderElement(width, height);
        svgElement.appendChild(placeholder);
        this.containerElement.appendChild(svgElement);
        // 2D loop
        for(var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple){
            // Write the contents of this row of the barcode
            for(var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple){
                if (input.get(inputX, inputY) === 1) {
                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);
                    svgElement.appendChild(svgRectElement);
                }
            }
        }
        return svgElement;
    };
    /**
     * Default quiet zone in pixels.
     */ BrowserCodeSvgWriter.QUIET_ZONE_SIZE = 4;
    /**
     * SVG markup NameSpace
     */ BrowserCodeSvgWriter.SVG_NS = 'http://www.w3.org/2000/svg';
    return BrowserCodeSvgWriter;
}();
;
 //# sourceMappingURL=BrowserCodeSvgWriter.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/writers/BrowserQRCodeSvgWriter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrowserQRCodeSvgWriter": (()=>BrowserQRCodeSvgWriter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/EncodeHintType.js [app-client] (ecmascript) <export default as EncodeHintType>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/IllegalArgumentException.js [app-client] (ecmascript) <export default as IllegalArgumentException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalStateException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalStateException$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/IllegalStateException.js [app-client] (ecmascript) <export default as IllegalStateException>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/qrcode/decoder/ErrorCorrectionLevel.js [app-client] (ecmascript) <export default as QRCodeDecoderErrorCorrectionLevel>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$encoder$2f$Encoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeEncoder$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/core/qrcode/encoder/Encoder.js [app-client] (ecmascript) <export default as QRCodeEncoder>");
;
var svgNs = 'http://www.w3.org/2000/svg';
/**/ var BrowserQRCodeSvgWriter = function() {
    function BrowserQRCodeSvgWriter() {}
    /**
     * Writes and renders a QRCode SVG element.
     *
     * @param contents
     * @param width
     * @param height
     * @param hints
     */ BrowserQRCodeSvgWriter.prototype.write = function(contents, width, height, hints) {
        if (contents.length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__["IllegalArgumentException"]('Found empty contents');
        }
        // if (format != BarcodeFormat.QR_CODE) {
        //   throw new IllegalArgumentException("Can only encode QR_CODE, but got " + format)
        // }
        if (width < 0 || height < 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalArgumentException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalArgumentException$3e$__["IllegalArgumentException"]('Requested dimensions are too small: ' + width + 'x' + height);
        }
        var errorCorrectionLevel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__["QRCodeDecoderErrorCorrectionLevel"].L;
        var quietZone = BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE;
        if (hints) {
            if (undefined !== hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].ERROR_CORRECTION)) {
                var correctionStr = hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].ERROR_CORRECTION).toString();
                errorCorrectionLevel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$decoder$2f$ErrorCorrectionLevel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeDecoderErrorCorrectionLevel$3e$__["QRCodeDecoderErrorCorrectionLevel"].fromString(correctionStr);
            }
            if (undefined !== hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].MARGIN)) {
                quietZone = Number.parseInt(hints.get(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$EncodeHintType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__EncodeHintType$3e$__["EncodeHintType"].MARGIN).toString(), 10);
            }
        }
        var code = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$qrcode$2f$encoder$2f$Encoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__QRCodeEncoder$3e$__["QRCodeEncoder"].encode(contents, errorCorrectionLevel, hints);
        return this.renderResult(code, width, height, quietZone);
    };
    /**
     * Renders the result and then appends it to the DOM.
     */ BrowserQRCodeSvgWriter.prototype.writeToDom = function(containerElement, contents, width, height, hints) {
        if (typeof containerElement === 'string') {
            var targetEl = document.querySelector(containerElement);
            if (!targetEl) {
                throw new Error('Could no find the target HTML element.');
            }
            containerElement = targetEl;
        }
        var svgElement = this.write(contents, width, height, hints);
        if (containerElement instanceof HTMLElement) {
            containerElement.appendChild(svgElement);
        }
    };
    /**
     * Note that the input matrix uses 0 == white, 1 == black.
     * The output matrix uses 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).
     */ BrowserQRCodeSvgWriter.prototype.renderResult = function(code, width /*int*/ , height /*int*/ , quietZone /*int*/ ) {
        var input = code.getMatrix();
        if (input === null) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$core$2f$IllegalStateException$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__IllegalStateException$3e$__["IllegalStateException"]();
        }
        var inputWidth = input.getWidth();
        var inputHeight = input.getHeight();
        var qrWidth = inputWidth + quietZone * 2;
        var qrHeight = inputHeight + quietZone * 2;
        var outputWidth = Math.max(width, qrWidth);
        var outputHeight = Math.max(height, qrHeight);
        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));
        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested
        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.
        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will
        // handle all the padding from 100x100 (the actual QR) up to 200x160.
        var leftPadding = Math.floor((outputWidth - inputWidth * multiple) / 2);
        var topPadding = Math.floor((outputHeight - inputHeight * multiple) / 2);
        var svgElement = this.createSVGElement(outputWidth, outputHeight);
        for(var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple){
            // Write the contents of this row of the barcode
            for(var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple){
                if (input.get(inputX, inputY) === 1) {
                    var svgRectElement = this.createSvgRectElement(outputX, outputY, multiple, multiple);
                    svgElement.appendChild(svgRectElement);
                }
            }
        }
        return svgElement;
    };
    /**
     * Creates a SVG element.
     *
     * @param w SVG's width attribute
     * @param h SVG's height attribute
     */ BrowserQRCodeSvgWriter.prototype.createSVGElement = function(w, h) {
        var svgElement = document.createElementNS(svgNs, 'svg');
        var width = w.toString();
        var height = h.toString();
        svgElement.setAttribute('height', height);
        svgElement.setAttribute('width', width);
        svgElement.setAttribute('viewBox', "0 0 " + width + " " + height);
        return svgElement;
    };
    /**
     * Creates a SVG rect element.
     *
     * @param x Element's x coordinate
     * @param y Element's y coordinate
     * @param w Element's width attribute
     * @param h Element's height attribute
     */ BrowserQRCodeSvgWriter.prototype.createSvgRectElement = function(x, y, w, h) {
        var rect = document.createElementNS(svgNs, 'rect');
        rect.setAttribute('x', x.toString());
        rect.setAttribute('y', y.toString());
        rect.setAttribute('height', w.toString());
        rect.setAttribute('width', h.toString());
        rect.setAttribute('fill', '#000000');
        return rect;
    };
    BrowserQRCodeSvgWriter.QUIET_ZONE_SIZE = 4;
    return BrowserQRCodeSvgWriter;
}();
;
 //# sourceMappingURL=BrowserQRCodeSvgWriter.js.map
}}),
"[project]/node_modules/@zxing/browser/esm/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// public API
// core
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
// common
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLCanvasElementLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLVisualMediaElement$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/HTMLVisualMediaElement.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$IScannerControls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/IScannerControls.js [app-client] (ecmascript)");
// readers
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserAztecCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserAztecCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserMultiFormatOneDReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatOneDReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserDatamatrixCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserDatamatrixCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserMultiFormatReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserPDF417Reader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserPDF417Reader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserQRCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserQRCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$IBrowserCodeReaderOptions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/IBrowserCodeReaderOptions.js [app-client] (ecmascript)");
// writers
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$writers$2f$BrowserCodeSvgWriter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/writers/BrowserCodeSvgWriter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$writers$2f$BrowserQRCodeSvgWriter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/writers/BrowserQRCodeSvgWriter.js [app-client] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@zxing/browser/esm/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$library$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/library/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLCanvasElementLuminanceSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/HTMLCanvasElementLuminanceSource.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$HTMLVisualMediaElement$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/HTMLVisualMediaElement.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$common$2f$IScannerControls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/common/IScannerControls.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserAztecCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserAztecCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserMultiFormatOneDReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatOneDReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserDatamatrixCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserDatamatrixCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserMultiFormatReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserMultiFormatReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserPDF417Reader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserPDF417Reader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$BrowserQRCodeReader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/BrowserQRCodeReader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$readers$2f$IBrowserCodeReaderOptions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/readers/IBrowserCodeReaderOptions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$writers$2f$BrowserCodeSvgWriter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/writers/BrowserCodeSvgWriter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$writers$2f$BrowserQRCodeSvgWriter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/writers/BrowserQRCodeSvgWriter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$zxing$2f$browser$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@zxing/browser/esm/index.js [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_%40zxing_browser_esm_6dcb79c3._.js.map